@model ContentPropertyIndex
@{
  var sharedLink = Model.GetSharedLinkPost();
}

<div class="body" id="@sharedLink.View.AppName">
  <div v-if="showTable">
    <p>
      <input type="button" class="btn btn-primary" v-on:click="ShowDetail(0)" value="Add" />
    </p>
    <table class="table table-bordered table-striped table-hover basic-example dataTable">
      <thead>
        <tr>
          <td>Display Order</td>
          @foreach (var header in sharedLink.Headers)
          {
            <td>@header</td>
          }
          <td>Options</td>
        </tr>
      </thead>
      <tbody>
        <tr v-for="item in list">
          <td v-on:click="ShowDetail(item.Id)">{{item.DisplayOrder}}</td>
          @foreach (var header in sharedLink.Headers)
          {
            if (sharedLink.Images.Contains(header))
            {
              <td>
                <img v-on:click="ShowDetail(item.Id)" style="max-width:75px;max-height:75px;" :src="ImageUrl(item.@header)" />
              </td>
            }
            else
            {
              <td>
                <p v-on:click="ShowDetail(item.Id)">{{item.@header}}</p>
              </td>
            }

          }
          <td>
            <input type="button" class="btn" v-on:click="toggle(item.Id)" v-bind:class="{ 'btn-success': item.Displayed, 'btn-secondary': !item.Displayed }" :value="item.Displayed?'Display':'Hide'" />
            <input type="button" v-on:click="deleteRow(item.Id)" class="btn btn-danger" value="delete" />
          </td>
        </tr>

      </tbody>
      <tfoot>
        <tr>
          <td>Id</td>
          @foreach (var header in sharedLink.Headers)
          {
            <td>@header</td>
          }
          <td>Display Order</td>
        </tr>
      </tfoot>

    </table>
  </div>
  <div v-else>
    <div>
      <iframe id="frame_@sharedLink.View.AppName" style="width:100%;height:600px; border:none;" :src="detailUrl"></iframe>
    </div>
  </div>

</div>
<script>
  var @sharedLink.View.ListName =[];
  function htmldecode_@(sharedLink.View.ListName)(str) {
    str = str.replace(/&amp;/gi, '&');
    str = str.replace(/&nbsp;/gi, ' ');
    str = str.replace(/&quot;/gi, '"');
    str = str.replace(/&#39;/g, "'");
    str = str.replace(/&lt;/gi, '<');
    str = str.replace(/&gt;/gi, '>');
    //str = str.replace(/<br[^>]*>(?:(rn)|r|n)?/gi, 'n');
    return str;
  }
  function set_list_@(sharedLink.View.ListName)(str) {
    var newStr = htmldecode_@(sharedLink.View.ListName)(str
      .replace(/&quot;/g, '"')
      .replace(/\\/g, '/')
      .replace(/\n/g, '')
      .replace(/\r/g, ''));
    var list = JSON.parse(newStr);
    @(sharedLink.View.ListName).splice(0, @(sharedLink.View.ListName).length);
        for (var i = 0; i < list.length; i++) {
          @(sharedLink.View.ListName).push(list[i]);
        }
  }
  set_list_@(sharedLink.View.ListName)('@Html.Raw(sharedLink.View.Value.Text())');
  var content_@sharedLink.View.AppName = '';

  function refresh_@(sharedLink.View.AppName)() {
    var thisUrl = `@Html.Raw(Url.Action("GetSharedLinks", "SharedLinks", new {@id=Model.ModelId,@key=Model.Property.Key,@area="Admin" }))`;
    $.get(thisUrl, function (data) {
      setTimeout(() => swal.close(), 500);
      if (data && data.value) {
        set_list_@(sharedLink.View.ListName)(data.value);
      }
    });
  }
  function hide_refresh_app_@(sharedLink.View.AppName)() {
    var isSingle = @(Model.Property.IsSingleRecord?"true":"false");
    if (isSingle) {
      $('#@Model.ModalName').modal('hide');
    } else {
      refresh_@(sharedLink.View.AppName)();
      app_@(sharedLink.View.AppName).ShowTable();
    }
  }
  var app_@sharedLink.View.AppName = new Vue({
    el: '#@sharedLink.View.AppName',
    data: {
      list: @sharedLink.View.ListName,
      showTable: @(Model.Property.IsSingleRecord?"false":"true"),
      detailUrl:'',
      isSingle:@(Model.Property.IsSingleRecord?"true":"false"),
      baseUrl: `/Admin/ModelManagement/EditSharedLink/-1?lang=@(Model.Lang??0)&typeName=@($"{sharedLink.TypeName},{sharedLink.AssemblyName}")&isRelated=@(sharedLink.IsRelated)&relatedId=@(sharedLink.RelatedId)&closed=hide_refresh_app_@(sharedLink.View.AppName)`,
    },
    methods: {
      IsShowTable: function () {
        return this.ShowTable || this.isSingle == false;
      },
      ResetDefault: function () {
        if (this.isSingle) {
          this.detailUrl = this.baseUrl;
        }
      },
      ImageUrl: function (input) {
        return `/${input}`;
      },
      ShowTable: function () {
        if (this.isSingle == false) {
          this.showTable = true;
        } else {
          this.ShowDetail(-1);
        }

      },
      PostDetail: function () {
        var formData = new FormData($('#@sharedLink.View.AppName form')[0]);
        $.ajax({
          url: '@Url.Action("EditSharedLink", "ModelManagement",new { @area = "Admin" })',
          type: 'post',
          data: formData,
          contentType: false,
          processData: false,
        })
          .then(function (response) {
            this.ShowTable();
          })
      },
      ShowDetail: function (id) {
        var url = `/Admin/ModelManagement/EditSharedLink/${id}?lang=@(Model.Lang??0)&typeName=@($"{sharedLink.TypeName},{sharedLink.AssemblyName}")&isRelated=@(sharedLink.IsRelated)&relatedId=@(sharedLink.RelatedId)&closed=hide_refresh_app_@(sharedLink.View.AppName)`;
        if (this.isSingle) {

        } else {
          this.detailUrl = url;
        }

        this.showTable = false;
        var shows = this.ShowTable;
        var isSingle = this.isSingle;
        function resetUrl() {
          var win = document.getElementById("frame_@sharedLink.View.AppName");
          if (!win) {
            setTimeout(resetUrl, 50);
          }
          var testiframe_@sharedLink.View.AppName = document.getElementById("frame_@sharedLink.View.AppName").contentWindow;
          if (!testiframe_@sharedLink.View.AppName) {
            setTimeout(resetUrl, 50);
          }
          if (id == -1) {
            if (testiframe_@(sharedLink.View.AppName).window.location.href.replace(/%20/g,' ') == `${testiframe_@(sharedLink.View.AppName).window.location.protocol}//${testiframe_@(sharedLink.View.AppName).window.location.host}${url}`) {
              return;
            }
            testiframe_@(sharedLink.View.AppName).window.location.href = url;
          }
        }
        resetUrl();
      }, deleteRow: function (id) {
        swal({
          title: "Are you sure?",
          text: "You will not be able to recover!",
          type: "warning",
          showCancelButton: true,
          confirmButtonColor: "#DD6B55",
          confirmButtonText: "Yes, delete it!",
          cancelButtonText: "No, cancel plx!",
          closeOnConfirm: false,
          closeOnCancel: false,
        }, function (isConfirm) {
          if (isConfirm) {
            swal("Deleted!", "Your record has been deleted.", "success");
            $.post(
              '@Html.Raw(Url.Action("Delete", "SharedLinks",new { @area="Admin" }))',
              {
                id: @Model.ModelId,
                key: '@Model.Property.Key',
                fullType:'@Model.FullType',
                asm: '@Model.AssemblyName',
                sharedLinksId:id,
              },
              function (r) {
                setTimeout(() => swal.close(), 500);
                if (!r||r.value==null||r.value==undefined) {
                  return;
                }
                set_list_@(sharedLink.View.ListName)(r.value);
              });
            } else {
            swal("Cancelled", "Your record is safe :)", "error");

            setTimeout(() => swal.close(), 1000);
          }
        });
      }, toggle: function (id) {

        swal("Success!", "Your record has been update.", "success");
        $.post(
          '@Html.Raw(Url.Action("Toggle", "SharedLinks",new { @area="Admin" }))',
          {
            id: @Model.ModelId,
            key: '@Model.Property.Key',
            fullType:'@Model.FullType',
            asm: '@Model.AssemblyName',
            sharedLinksId:id,
          },
          function (r) {
            setTimeout(() => swal.close(), 1000);
            if (!r||!r.value) {
              return;
            }
            set_list_@(sharedLink.View.ListName)(r.value);
          });
      }
    },
    mounted: function () {
      if (!this.isSingle) {
        return;
      }
      this.ShowDetail(-1);
    }
  })
</script>