@model ContentViewModal
@{
  Layout = "~/Areas/Admin/Views/Shared/_Layout_Content.cshtml";
}
@inject IContentViewService service
@{
  var allList = Model.ContentPropertyIndexs.Union(service.Models.SelectMany(b => b.ContentPropertyIndexs));
}
<script>
  function postForm() {
    var form = document.getElementById('hide_modal');
    form.submit();
  }
</script>
<div class="card">
  <div class="card-header">
    <h2>Review Page</h2>
    <div class="button-box">
      <div class="btn-group">
        <button type="button" onclick="postForm()" class="btn btn-info btn-group">
          Save
        </button>
      </div>
    </div>
  </div>
  <div class="body">
    <iframe id="preview" style="width:100%;height:600px; border:none;" scrolling="no" src="@Url.Action("Detail","Page",new { @id=Model.Model.Id,@area="" })#@Guid.NewGuid().ToString()">
    </iframe>
  </div>
</div>



<form action="@Url.Action("EditPreview","Content")" id="hide_modal" method="post" enctype="multipart/form-data">

  @{ await Html.RenderPartialAsync("_ContentViewModalHide", Model);}
  @{ await Html.RenderPartialAsync("AdminInputs/_PropertiesEditModal", Model.ContentPropertyIndexs);}

  @{
    foreach (var m in service.Models)
    {
      await Html.RenderPartialAsync("_ModelPostHide", m);
      await Html.RenderPartialAsync("AdminInputs/_PropertiesEditModal", m.ContentPropertyIndexs);
    }
  }
</form>

@section script{
  <script>
    var preview = $('#preview')[0].contentWindow;
    $('#preview').load(function () {
      $('#preview').css('height', preview.document.body.scrollHeight+10);
      @foreach(var p in allList)
      {
        var modalId = p.ModalName;
        <Text>
        $(preview.document.getElementsByClassName('@modalId')).click(function () {
          $('#@modalId').modal('show');
        })


      $('#@modalId').on('hidden.bs.modal', function (e) {
        var name = '@p.OuterName';
        var input = $('#hide_modal' + ' [name="' + name+'"]');
        var type = '@p.Property.EditorType';
        var edits = $(preview.document.getElementsByClassName('@modalId'));
        function refresh_modal() {
          if (preview[`@p.ModalRefresh`]) {
            preview[`@p.ModalRefresh`]();
          }
        }
        switch (type) {
          case 'SharedLink':
            var refreshUrl = `@Html.Raw(@Url.Action("GetSharedView", "SharedLinks", new { @id = p.ModelId, @key = p.Property.Key, @area = "Admin" }))`;
            setTimeout(function () {
              $.get(refreshUrl, function (r) {
                if (!r) {
                  return;
                }
                $.each(edits, e => {
                  var edit = $(edits[e]);
                  edit.html(r);
                })
                refresh_modal();
              });
            app_App_@(p.Property.Key).ShowTable();
            app_App_@(p.Property.Key).ResetDefault();
            }, 500);

            return;
          case 'Html':
            var htmlEditor = CKEDITOR.instances[`${input.prop('id')}`].document.getBody().getHtml();
            $.each(edits, e => {
              var edit = $(edits[e]);
              edit.html(htmlEditor);
            })
            break;
          case 'FileUpload':
            var setImage = (inp, imgElement, noImg) => {
              if (!inp[0].files || !inp[0].files.length) {
                return;
              }
              var uploadFile = inp[0].files[0];
              var fileReader = new FileReader();
              fileReader.onload = () => {
                if (noImg) {
                  imgElement.css('background-image', 'url(' + fileReader.result + ')');
                } else {
                  imgElement.attr("src", fileReader.result);
                }
              }
              fileReader.readAsDataURL(uploadFile)
            };

            $.each(edits, e => {
              var edit = $(edits[e]);
              var editTag = edit.prop('tagName').toLowerCase();
              switch (editTag) {
                case "img":
                  setImage(input, edit, false);
                  break;
                default:
                  setImage(input, edit, true);
                  break;
              }
            })
            break;
          default:
            $.each(edits, e => {
              var edit = $(edits[e]);
              edit.html(input.val());
            })
            break;
        }
          refresh_modal();
       })
        </Text>
      }
    });

    function model_close_click(id) {

    }
    function link_clicked(e) {
      console.log(e);
    }

  </script>
}