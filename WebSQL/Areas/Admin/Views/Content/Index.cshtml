@using SDHC.Common.Entity.Models
@model BaseContent
@{
    Layout = "~/Areas/Admin/Views/Shared/_Layout_Content.cshtml";
    var contentId = Model != null ? (long?)Model.Id : null;
    var contents = ContentManager.GetAllChildContent(contentId)
        .OrderByDescending(b => b.DisplayOrder).ToList();
    IEnumerable<string> CreateRole;
    IEnumerable<string> ReadRole;
    IEnumerable<string> UpdateRole;
    IEnumerable<string> DeleteRole;
    if (Model == null)
    {
        CreateRole = Enumerable.Empty<string>();
        ReadRole = Enumerable.Empty<string>();
        UpdateRole = Enumerable.Empty<string>();
        DeleteRole = Enumerable.Empty<string>();
        //var type = ContentE.RootType.CustomAttributes.Where(b => b.AttributeType == typeof(SDHCC.AllowChildrenAttribute)).FirstOrDefault();
        //if (type != null)
        //{
        //    var createRoles = type.NamedArguments.Where(b => b.MemberName == "CreateRoles").FirstOrDefault();
        //    if (createRoles != null)
        //    {
        //        var role = (System.Collections.ObjectModel.ReadOnlyCollection<System.Reflection.CustomAttributeTypedArgument>)createRoles.TypedValue.Value;
        //        CreateRole = role.Select(b => b.Value.ToString()).ToList();
        //    }
        //    var editRoles = type.NamedArguments.Where(b => b.MemberName == "EditRoles").FirstOrDefault();
        //    if (editRoles != null)
        //    {
        //        var eRoles = (System.Collections.ObjectModel.ReadOnlyCollection<System.Reflection.CustomAttributeTypedArgument>)editRoles.TypedValue.Value;
        //        UpdateRole = eRoles.Select(b => b.Value.ToString()).ToList();
        //    }
        //}
    }
    else
    {
        //CreateRole = Model.AdminCreateRoles;
        //ReadRole = Model.AdminReadRoles;
        //UpdateRole = Model.AdminUpdateRoles;
        //DeleteRole = Model.AdminDeleteRoles;
    }
}

@section breadcrumb{
    @{ Html.RenderPartial("_BreadCrumbContent", Model);}
}

<div class="button-box">
    @*@if (users.IsUserInRoles(User, CreateRole, true))
        {
            <div class="btn-group">
                <button type="button" class="btn btn-info dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    Create
                </button>
                <div class="dropdown-menu">
                    @{
                        var avaliableChild = contentId.GetAllowChild();
                    }
                    @foreach (var child in avaliableChild)
                    {
                        <form action="@Url.Action("PreCreate","Page",new { @area="Admin" })" method="post">
                            @Html.Hidden("ContentId", contentId)
                            @Html.Hidden("FullType", child.FullName + "," + child.Assembly)
                            <input type="submit" class="dropdown-item" name="name" value="@child.Name" />
                        </form>

                    }
                </div>
            </div>
        }
        @if (Model != null && users.IsUserInRoles(User, UpdateRole, true))
        {
            <a href="@Url.Action("Edit","Page",new { @area="Admin",@id=contentId })" class="btn btn-success">Edit</a>
        }
        @if (users.IsUserInRoles(User, UpdateRole, true))
        {
            <a href="@Url.Action("Sort","Page",new { @area="Admin",@id=contentId })" class="btn btn-warning">Sort</a>
        }
        @if (Model != null && users.IsUserInRoles(User, DeleteRole, true))
        {
            <a href="#" onclick="deleteCurrent()" class="btn btn-danger">Delete</a>
            <form id="ContentDeleteForm" action="@Url.Action("Delete","Page",new { @area="Admin" })" method="post">
                @Html.Hidden("ContentId", contentId)
            </form>
        }*@
    <div class="btn-group">
        <button type="button" class="btn btn-info dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            Create
        </button>
        <div class="dropdown-menu">
            @{
                var avaliableChild = TypeExtends.GetAllowChildrens(Model);
            }
            @foreach (var child in avaliableChild)
            {
                <form action="@Url.Action("PreCreate","Content",new { @area="Admin" })" method="post">
                    @Html.Hidden("ContentId", contentId)
                    @Html.Hidden("FullType", child.FullName + "," + child.Assembly.FullName)
                    <input type="submit" class="dropdown-item" name="name" value="@TypeExtends.GetClassDisplayName(child)" />
                </form>
             }
        </div>
    </div>
    <a href="@Url.Action("Edit","Content",new { @area="Admin",@id=contentId })" class="btn btn-success">Edit</a>
    <a href="@Url.Action("Sort","Content",new { @area="Admin",@id=contentId })" class="btn btn-warning">Sort</a>
    <a href="#" onclick="deleteCurrent()" class="btn btn-danger">Delete</a>
    <form id="ContentDeleteForm" action="@Url.Action("Delete","Content",new { @area="Admin" })" method="post">
        @Html.Hidden("id", contentId)
    </form>
</div>

<br />

<div class="card">
    <div class="card-block">
        @*<h4 class="card-title">Static</h4>*@
        <div id="staticgrid"></div>
    </div>
</div>

@section script{
    @{
        Html.RenderPartial("Contents/_ContentTable", new ContentTableView(
         contents,
         $@"window.location.href ='/admin/content/Index/' + b.item.id;",
         Model != null ? Model.GetType() : typeof(BaseContent)));}
}
